import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;

/**
 * 
 * A class that is used to read a magic square and check if it is valid, or
 * create a magic square with a given odd number from the user and then print
 * it.
 * 
 * @author balaseer
 * 
 */

public class MagicSquare {

    private static final int ERROR_CODE = 1;
    private int matrixSize = 0;
    private File file;
    private int[][] matrix;
    private int row = 0;
    private int col = 0;
    private int diag1 = 0;
    private int diag2 = 0;
    private boolean check;
    private int equation = 0;
    private int finalValue = 0;
    private int finalValue1 = 0;
    private int previousRow = 0;
    private int previousCol = 0;
    private String size;
    private int n;
    private ArrayList<Integer> matrixValues = new ArrayList<Integer>();

    /**
     * 
     * constructor that creates a magic square object of size i.
     * 
     * @param i
     */
    public MagicSquare(int i) {

        matrixSize = i;

    }

    /**
     * 
     * constructor that creates a magic square object from a given file.
     * 
     * @param fileName
     */

    public MagicSquare(File fileName) {
        this.file = fileName;
    }

    /**
     * 
     * method to read a given matrix.
     * 
     */

    public void readMatrix() {

        try {

            Scanner fileScan = new Scanner(file);

            matrixSize = fileScan.nextInt();
            equation = matrixSize * ((matrixSize * matrixSize) + 1) / 2;

            matrix = new int[matrixSize][matrixSize];

            for (int row = 0; row < matrixSize; row++) {
                for (int col = 0; col < matrixSize; col++) {
                    matrix[row][col] = fileScan.nextInt();
                    matrixValues.add(matrix[row][col]); //keeping track of the values in the matrix.
                }
            }

        } catch (InputMismatchException ime) {

            System.out.println("File does not contain integers.");
            ime.printStackTrace();
            System.exit(1);
        } catch (FileNotFoundException ffe) {

            System.out.println("File not found");
            ffe.printStackTrace();
            System.exit(1);
        }

    }

    /**
     * 
     * method that writes a magic square to a specified file
     * 
     * @param filename
     */

    public void writeMatrix(String filename) {

        File file = new File(filename);
        try {
            PrintWriter outFile = new PrintWriter(new FileWriter(file));
            outFile.printf("%4d\n", matrix.length);

            for (int row = 0; row < matrix.length; row++) {
                for (int col = 0; col < matrix[0].length; col++) {
                    outFile.printf("%4d", matrix[row][col]);

                }
                outFile.println();
            }

            outFile.close();
        } catch (IOException e) {
            System.out.println("IOException found");
            e.printStackTrace();
        }

    }

    /**
     * method that writes a magic square and displays it to the user.
     * 
     * @param b
     */
    public void printValidMatrix(boolean b) {

        if (b == true) {
            System.out.println("The Matrix");
            System.out.println();
            
            
            for (int row = 0; row < matrix.length; row++) {
                for (int col = 0; col < matrix[0].length; col++) {
                    System.out.printf("%4d", matrix[row][col]);

                }
                System.out.println();
            }
            System.out.println();
            System.out.println("Is a magic square");
        } else {
            System.out.println("The Matrix");
            System.out.println();

            for (int row = 0; row < matrix.length; row++) {
                for (int col = 0; col < matrix[0].length; col++) {
                    System.out.printf("%3d", matrix[row][col]);

                }
                System.out.println();
            }
            System.out.println();
            System.out.println("Is not a magic square");
        }
    }

    /**
     * 
     * method that checks if a magic square is valid or not.
     * 
     * @return true if valid, false if not.
     */

    public boolean checkMatrix() {

        check = false;
        boolean rowB = false;
        boolean colB = false;
        boolean values = false;

        for (int row = 0; row < matrixSize; row++) {
            for (int col = 0; col < matrixSize; col++) {

                if (matrixValues.contains(matrix[row][col])) { //checking if matrix contains valid values. 
                    values = true;
                }

                if (row == col) {
                    diag1 += matrix[row][col]; //checking one diagonal.
                }
                if (row + col == matrixSize - 1) {
                    diag2 += matrix[row][col]; // checking second diagonal.
                }

                if (col == 0) {
                    checkRight(row, col);
                    if (finalValue == equation) { //checking rows.
                        rowB = true;
                    }
                }
                if (row == 0) {
                    checkDown(row, col);
                    if (finalValue1 == equation) { //checking columns.
                        colB = true;
                    }
                }
            }
        }

        if (diag1 == equation && diag2 == equation && rowB && colB && values) {
            check = true;
        }

        return check;

    }

    /**
     * 
     * method that checks a row of a 2-D array and sums the values.
     * 
     * @param row
     * @param col
     * @return the value of the sums of the row.
     */

    public int checkRight(int row, int col) {

        while (col <= matrixSize - 1) {
            finalValue += matrix[row][col];
            col++;
        }
        return finalValue;

    }

    /**
     * 
     * method that check a column of a 2-D array and sums the values.
     * 
     * @param row
     * @param col
     * @return the value of the sums of the column.
     */

    public int checkDown(int row, int col) {

        while (row <= matrixSize - 1) {
            finalValue1 += matrix[row][col];
            row++;
        }
        return finalValue1;
    }

    /**
     * 
     * method that creates a magic square with a given size.
     * 
     * @param size
     */

    public void createMagicSquare(int size) {
        this.matrixSize = size;
        matrix = new int[matrixSize][matrixSize];

        for (int row = 0; row < matrixSize; row++) {
            for (int col = 0; col < matrixSize; col++) {
                matrix[row][col] = 0;
            }
        }

        if (matrixSize % 2 != 0) {
            row = matrixSize - 1;
            col = matrixSize / 2;

            for (int k = 1; k <= (matrixSize * matrixSize); k++) {
                matrix[row][col] = k;
                previousRow = row;
                previousCol = col;
                row++;
                col++;
                if (row == matrixSize) {
                    row = 0;
                }
                if (col == matrixSize) {
                    col = 0;
                }
                if (matrix[row][col] != 0) {
                    row = previousRow;
                    col = previousCol;
                    row--;
                }
            }
        } else {
            System.out.println("Matrix size must be odd");
            System.exit(1);
        }

    }

}